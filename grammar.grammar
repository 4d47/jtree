grammar
 name grammar
 description This file is just used for type checking and documenting grammar files. The actual tree grammar parser is hard coded.
 catchAllKeyword _error
 keywordOrder grammar wordType abstract keyword
 extensions grammar gram
 example A grammar that parses anything:
  grammar
   name latin
   catchAllKeyword any
  keyword any
   any
 version 1.1.0
 keywords
  grammar
  keyword
  wordType
  abstract
wordType int
 regex \-?[0-9]+
 highlightScope constant.numeric
wordType float
 regex \-?[0-9]*\.?[0-9]*
wordType scopeName
 enum comment comment.block comment.block.documentation comment.line constant constant.character.escape constant.language constant.numeric constant.numeric.complex constant.numeric.complex.imaginary constant.numeric.complex.real constant.numeric.float constant.numeric.float.binary constant.numeric.float.decimal constant.numeric.float.hexadecimal constant.numeric.float.octal constant.numeric.float.other constant.numeric.integer constant.numeric.integer.binary constant.numeric.integer.decimal constant.numeric.integer.hexadecimal constant.numeric.integer.octal constant.numeric.integer.other constant.other constant.other.placeholder entity entity.name entity.name.class entity.name.class.forward-decl entity.name.constant entity.name.enum entity.name.function entity.name.function.constructor entity.name.function.destructor entity.name.impl entity.name.interface entity.name.label entity.name.namespace entity.name.section entity.name.struct entity.name.tag entity.name.trait entity.name.type entity.name.union entity.other.attribute-name entity.other.inherited-class invalid invalid.deprecated invalid.illegal keyword keyword.control keyword.control.conditional keyword.control.import keyword.declaration keyword.operator keyword.operator.arithmetic keyword.operator.assignment keyword.operator.bitwise keyword.operator.logical keyword.operator.word keyword.other markup markup.bold markup.deleted markup.heading markup.inserted markup.italic markup.list.numbered markup.list.unnumbered markup.other markup.quote markup.raw.block markup.raw.inline markup.underline markup.underline.link meta meta.annotation meta.annotation.identifier meta.annotation.parameters meta.block meta.braces meta.brackets meta.class meta.enum meta.function meta.function-call meta.function.parameters meta.function.return-type meta.generic meta.group meta.impl meta.interface meta.interpolation meta.namespace meta.paragraph meta.parens meta.path meta.preprocessor meta.string meta.struct meta.tag meta.toc-list meta.trait meta.type meta.union punctuation punctuation.accessor punctuation.definition.annotation punctuation.definition.comment punctuation.definition.generic.begin punctuation.definition.generic.end punctuation.definition.keyword punctuation.definition.string.begin punctuation.definition.string.end punctuation.definition.variable punctuation.section.block.begin punctuation.section.block.end punctuation.section.braces.begin punctuation.section.braces.end punctuation.section.brackets.begin punctuation.section.brackets.end punctuation.section.group.begin punctuation.section.group.end punctuation.section.interpolation.begin punctuation.section.interpolation.end punctuation.section.parens.begin punctuation.section.parens.end punctuation.separator punctuation.separator.continuation punctuation.terminator source source.language-suffix.embedded storage storage.modifier storage.type storage.type keyword.declaration.type storage.type.class keyword.declaration.class storage.type.enum keyword.declaration.enum storage.type.function keyword.declaration.function storage.type.impl keyword.declaration.impl storage.type.interface keyword.declaration.interface storage.type.struct keyword.declaration.struct storage.type.trait keyword.declaration.trait storage.type.union keyword.declaration.union string string.quoted.double string.quoted.other string.quoted.single string.quoted.triple string.regexp string.unquoted support support.class support.constant support.function support.module support.type text text.html text.xml variable variable.annotation variable.function variable.language variable.other variable.other.constant variable.other.member variable.other.readwrite variable.parameter
 highlightScope string
wordType word
 regex [a-zA-Z]+
 highlightScope variable.parameter
wordType lowercaseWord
 regex [a-z]+
wordType anyWord
wordType string
 highlightScope string
wordType exampleWord string
 highlightScope comment
wordType filepath
wordType keywordName
 highlightScope variable.parameter
wordType fileExtension
wordType regexWord
 highlightScope string.regexp
wordType semanticVersion
 regex [0-9]+\.[0-9]+\.[0-9]+
 highlightScope constant.numeric
wordType wordTypeName
wordType wordTypeEnum
 keywordTable wordType 1
wordType extendedWordType wordTypeName
wordType enumOption
wordType constructorName
wordType builtInConstructorOrConstructorName
wordType builtInConstructorOrFilePath
wordType compilerTargetExtension
 description The target extension of the compiler output such as "o" or "js" or "html"
wordType tag
wordType extendedKeyword
wordType grammarName
 highlightScope constant
abstract _keywordRule
 highlightScope entity.other.attribute-name
 single
abstract _compilerRule
 catchAllColumn anyWord
 highlightScope entity.other.attribute-name
abstract _nonTerminalKeywordRule _keywordRule
abstract _environment
keyword name
 columns grammarName
 highlightScope constant.language
 description The name of your language. Also serves as the default file extension.
keyword grammar
 required
 single
 highlightScope constant.language
 keywords
  name
  description
  example
  extensions
  keywordOrder
  keywords
  constructors
  compiler
  catchAllKeyword
  version
keyword keywordOrder
 catchAllColumn keywordName
 highlightScope constant.language
 description Optionally specify what order keywords should be sorted in when prettifying a file.
keyword version
 columns semanticVersion
 highlightScope constant.language
 description Version number of your language.
keyword extensions
 catchAllColumn fileExtension
 highlightScope constant.language
 description File extensions of your language.
keyword abstract keyword
 highlightScope entity.name.tag
 description An abstract keyword cannot be used by itself but provides common functionality to keywords that extend it.
 keywords
  _keywordRule
  group
keyword wordType
 columns wordTypeName
 catchAllColumn extendedWordType
 highlightScope variable.parameter
 keywords
  highlightScope
  regex
  keywordTable
  description
  enum
  parseWith
keyword parseWith
 catchAllColumn anyWord
 highlightScope entity.other.attribute-name
 single
keyword group
 catchAllColumn keywordName
 highlightScope entity.other.attribute-name
 description Available on abstract nodes only. Use it to more concisely generate keywords all extending from this abstract keyword, if they have no special properties.
keyword enum
 catchAllColumn enumOption
 highlightScope entity.other.attribute-name
keyword keywordTable
 columns anyWord int
 highlightScope entity.other.attribute-name
keyword catchAllKeyword _keywordRule
 description If a keyword is not found in the keywords list, instantiate this type of node instead.
 columns keywordName
keyword browser _environment
 columns builtInConstructorOrConstructorName
 description builtInConstructorOrConstructorName will be searched for on the window object.
keyword nodejs _environment
 columns builtInConstructorOrFilePath
 catchAllColumn constructorName
 description For nodejs constructors, if specified, the existence of this constructor will be checked when the grammar file is checked for errors.
keyword constructors _nonTerminalKeywordRule
 keywords
  nodejs
  browser
 description A map of language/environment to filepaths and constructor classes to instantiate nodes with.
keyword frequency _keywordRule
 columns float
keyword columns _keywordRule
 catchAllColumn wordTypeEnum
 description Describes the word type of each word in the line.
keyword regex
 catchAllColumn regexWord
 description The word must match this pattern or it shall be marked as an error.
 highlightScope entity.other.attribute-name
 single
keyword compiler _keywordRule
 columns compilerTargetExtension
 keywords
  sub
  listDelimiter
  openChildren
  closeChildren
  indentCharacter
keyword sub _compilerRule
keyword listDelimiter _compilerRule
keyword openChildren _compilerRule
keyword closeChildren _compilerRule
keyword indentCharacter _compilerRule
keyword description _keywordRule
 catchAllColumn string
keyword _exampleLine
 catchAllColumn exampleWord
 highlightScope comment
 catchAllKeyword _exampleLine
keyword example _keywordRule
 description Provide a one line description and then a snippet of example code.
 catchAllColumn exampleWord
 catchAllKeyword _exampleLine
 highlightScope comment
keyword _defaultTuple
 columns anyWord
 catchAllColumn anyWord
keyword defaults _keywordRule
 catchAllKeyword _defaultTuple
keyword _constantAny
 catchAllColumn anyWord
 catchAllKeyword _constantAny
keyword _constantDefinition
 catchAllColumn anyWord
 catchAllKeyword _constantAny
keyword constants _keywordRule
 catchAllKeyword _constantDefinition
keyword _keywordUse
keyword any _keywordRule
keyword required _keywordRule
 description If present, the parent node will have an error if one of these nodes is not provided.
keyword single _keywordRule
 description If present and their are more than 1 of these nodes on the parent, an error will be present.
keyword tags _keywordRule
 catchAllColumn tag
keyword highlightScope _keywordRule
 columns scopeName
 description Provide this to get syntax highlighting in editors like Sublime and CodeMirror.
keyword keywords _nonTerminalKeywordRule
 catchAllKeyword _keywordUse
 description A list of possible child keywords for a node. This is a not a leaf node in order to allow seamless extending.
keyword _error
 constructors
  nodejs ErrorNode
  browser ErrorNode
keyword catchAllColumn _keywordRule
 columns wordTypeEnum
 description If there are extra words in the node's line, parse these words as this type.
keyword keyword
 columns keywordName
 catchAllColumn extendedKeyword
 catchAllKeyword _error
 constructors
  nodejs NonTerminalNode
  browser NonTerminalNode
 highlightScope variable.function
 keywords
  _keywordRule