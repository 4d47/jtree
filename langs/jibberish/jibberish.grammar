grammar
 name jibberish
 description A useless Tree Language built for testing Tree Notation code.
 constructors
  nodejs ./jibberishProgram.js
 compiler txt
 catchAllKeyword error
 keywords
  topLevel
  text
  someAbstractClass
cellType columnNameEnum
cellType columnName
cellType errorWord
 highlightScope invalid
cellType int
 highlightScope constant.numeric
cellType onoff
 enum on off
cellType word
abstract someAbstractClass
abstract topLevel
 highlightScope constant.language
abstract color_properties topLevel
 group hue saturation constrast
 cells int
keyword error
 highlightScope invalid
 catchAllCellType errorWord
 constructors
  nodejs ErrorNode
  browser ErrorNode
keyword lineOfCode
 catchAllCellType word
 constructors
  nodejs ./jibberishNodes.js LineOfCodeNode
  browser LineOfCodeNode jibberishNodes.js
keyword text
 any
keyword extendsAbstract someAbstractClass
 cells int
keyword add topLevel
 constructors
  nodejs ./jibberishNodes.js additionNode
keyword + add
 example Adding two numbers:
  + 1 2
 catchAllCellType int
 highlightScope keyword.operator.arithmetic
keyword block topLevel
 keywords
  topLevel
keyword to block
 cells word
 compiler txt
  sub to {word}
  closeChildren end
keyword foo topLevel
keyword xColumnName topLevel
 description The name of the column to use for the x axis
 cells columnNameEnum
 constructors
  javascript
   class extends jtree.NonTerminalNode {
     getRunTimeEnumOptions(cell) {
       return cell.getCellTypeName() === "columnNameEnum" ? ["gender", "height", "weight"] : undefined
     }
   }
keyword lightbulbState topLevel
 cells onoff
keyword nested topLevel
 constructors
  nodejs ./jibberishNodes.js nested.someNestedNode
keyword nodeWithConsts topLevel
 constants
  greeting string hello world
keyword someCode topLevel
 catchAllKeyword lineOfCode
keyword type topLevel
 cells word
 single