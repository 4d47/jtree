todo Add imports nodeTypes, along with source maps, so we can correctly support grammars split across multiple files, and better enable grammars from compositions of reusable bits
todo Change the extends syntax to just have an extend property, instead of the column position thing?
grammar
 name grammar
 description This file is just used for type checking and documenting grammar files. The actual tree grammar parser is hard coded.
 catchAllNodeType catchAll.error
 nodeTypeOrder tooling todo grammar cellType abstract nodeType
 extensions grammar gram
 example A grammar that parses anything:
  grammar
   name latin
   catchAllNodeType anyNode
  nodeType anyNode
   baseNodeType blobNode
 version 2.0.0
 inScope tooling todo grammar cellType abstract nodeType
cellType abstractConstant
 highlightScope entity.name.tag
cellType anyFirstWord
cellType anyWord
cellType baseNodeTypes
 enum blobNode errorNode terminalNode nonTerminalNode
 highlightScope variable.parameter
cellType booleanCell
 enum true false
 highlightScope constant.numeric
cellType cellPropertyName
 highlightScope variable.parameter
cellType cellTypeEnum
 enumFromGrammar cellType
cellType cellTypeId
 todo Put restrictions on allowed characters for now?
cellType cellTypeIdConstant
 highlightScope variable.parameter
cellType compilerTargetExtension
 description The target extension of the compiler output such as "o" or "js" or "html"
cellType constantIdentifier
 regex [a-zA-Z]\w+
 description A word that can be assigned to the node class in the target language.
cellType constructorFilePath
cellType constructorName
cellType enumOption
 todo Add an enumOption top level type, so we can add data to an enum option such as a description.
cellType extendedId
 todo Add cell checking. Also need to have a separate one for nodeTypes and cellTypes?
cellType extraWord
 highlightScope invalid
cellType fileExtension
 todo Put restrictions on allowed characters for now?
cellType filepath
cellType floatCell
 regex \-?[0-9]*\.?[0-9]*
 highlightScope constant.numeric
cellType grammarName
 highlightScope constant
 todo Put restrictions on allowed characters for now? All lowercase?
cellType grammarTypes
 enum cellType nodeType abstract
cellType intCell
 regex \-?[0-9]+
 highlightScope constant.numeric
cellType javascriptCodeWord
cellType lowercaseWord
 regex [a-z]+
cellType nodeTypeEnum
 highlightScope variable.parameter
 enumFromGrammar nodeType abstract
cellType nodeTypeId
 todo Cell type checking.
 todo Should this be abstractNodeTypeIdOrNodeTypeId?
 highlightScope variable.parameter
cellType nodeTypeIdConstant
 highlightScope variable.function
cellType propertyName
 highlightScope constant.language
cellType regexWord
 highlightScope string.regexp
cellType scopeName
 enum comment comment.block comment.block.documentation comment.line constant constant.character.escape constant.language constant.numeric constant.numeric.complex constant.numeric.complex.imaginary constant.numeric.complex.real constant.numeric.float constant.numeric.float.binary constant.numeric.float.decimal constant.numeric.float.hexadecimal constant.numeric.float.octal constant.numeric.float.other constant.numeric.integer constant.numeric.integer.binary constant.numeric.integer.decimal constant.numeric.integer.hexadecimal constant.numeric.integer.octal constant.numeric.integer.other constant.other constant.other.placeholder entity entity.name entity.name.class entity.name.class.forward-decl entity.name.constant entity.name.enum entity.name.function entity.name.function.constructor entity.name.function.destructor entity.name.impl entity.name.interface entity.name.label entity.name.namespace entity.name.section entity.name.struct entity.name.tag entity.name.trait entity.name.type entity.name.union entity.other.attribute-name entity.other.inherited-class invalid invalid.deprecated invalid.illegal keyword keyword.control keyword.control.conditional keyword.control.import keyword.declaration keyword.operator keyword.operator.arithmetic keyword.operator.assignment keyword.operator.bitwise keyword.operator.logical keyword.operator.word keyword.other markup markup.bold markup.deleted markup.heading markup.inserted markup.italic markup.list.numbered markup.list.unnumbered markup.other markup.quote markup.raw.block markup.raw.inline markup.underline markup.underline.link meta meta.annotation meta.annotation.identifier meta.annotation.parameters meta.block meta.braces meta.brackets meta.class meta.enum meta.function meta.function-call meta.function.parameters meta.function.return-type meta.generic meta.group meta.impl meta.interface meta.interpolation meta.namespace meta.paragraph meta.parens meta.path meta.preprocessor meta.string meta.struct meta.tag meta.toc-list meta.trait meta.type meta.union punctuation punctuation.accessor punctuation.definition.annotation punctuation.definition.comment punctuation.definition.generic.begin punctuation.definition.generic.end punctuation.definition.keyword punctuation.definition.string.begin punctuation.definition.string.end punctuation.definition.variable punctuation.section.block.begin punctuation.section.block.end punctuation.section.braces.begin punctuation.section.braces.end punctuation.section.brackets.begin punctuation.section.brackets.end punctuation.section.group.begin punctuation.section.group.end punctuation.section.interpolation.begin punctuation.section.interpolation.end punctuation.section.parens.begin punctuation.section.parens.end punctuation.separator punctuation.separator.continuation punctuation.terminator source source.language-suffix.embedded storage storage.modifier storage.type storage.type keyword.declaration.type storage.type.class keyword.declaration.class storage.type.enum keyword.declaration.enum storage.type.function keyword.declaration.function storage.type.impl keyword.declaration.impl storage.type.interface keyword.declaration.interface storage.type.struct keyword.declaration.struct storage.type.trait keyword.declaration.trait storage.type.union keyword.declaration.union string string.quoted.double string.quoted.other string.quoted.single string.quoted.triple string.regexp string.unquoted support support.class support.constant support.function support.module support.type text text.html text.xml variable variable.annotation variable.function variable.language variable.other variable.other.constant variable.other.member variable.other.readwrite variable.parameter
 highlightScope string
cellType scriptUrl
cellType semanticVersion
 regex [0-9]+\.[0-9]+\.[0-9]+
 highlightScope constant.numeric
cellType stringCell
 highlightScope string
cellType tag
cellType toolingDirectiveWord
 highlightScope comment
cellType todoWord
 highlightScope comment
cellType word
 regex [a-zA-Z]+
 highlightScope variable.parameter
cellType extendedCellType
 extends cellTypeId
cellType exampleWord
 highlightScope comment
 extends stringCell
abstract abstract.compilerRule
 todo Remove if we remove compiler stuff?
 catchAllCellType anyWord
 firstCellType propertyName
abstract abstract.environment
abstract abstract.nodeTypeRule
 firstCellType propertyName
 single
abstract abstract.constant
 description Assign a constant to a nodeType which will be available in the compiled nodeType classes.
 firstCellType propertyName
abstract abstract.nonTerminalNodeTypeRule
 extends abstract.nodeTypeRule
nodeType catchAll.error
 baseNodeType errorNode
nodeType catchAll.exampleLine
 catchAllCellType exampleWord
 firstCellType exampleWord
 catchAllNodeType catchAll.exampleLine
nodeType catchAll.javascriptCodeLine
 catchAllCellType javascriptCodeWord
 catchAllNodeType catchAll.javascriptCodeLine
nodeType cellType
 cells cellTypeId
 firstCellType cellTypeIdConstant
 inScope highlightScope regex enumFromGrammar description enum todo extends
nodeType enum
 catchAllCellType enumOption
 firstCellType cellPropertyName
nodeType enumFromGrammar
 catchAllCellType grammarTypes
 firstCellType cellPropertyName
nodeType extensions
 catchAllCellType fileExtension
 firstCellType propertyName
 description File extensions of your language. Sometimes your language might have multiple extensions. If you don't add this, your language name will be used as extension.
nodeType grammar
 todo Should this really be required?
 required
 single
 firstCellType propertyName
 inScope name description example extensions nodeTypeOrder inScope constructors compiler catchAllNodeType version abstract.constant javascript
nodeType group
 todo Remove this once we have imports?
 catchAllCellType nodeTypeId
 firstCellType propertyName
 description Available on abstract nodes only. Use it to more concisely generate nodeTypes all extending from this abstract nodeType, if they have no special properties.
nodeType highlightScope
 firstCellType propertyName
 cells scopeName
 description Provide this to get syntax highlighting in editors like Sublime and CodeMirror.
 single
nodeType name
 cells grammarName
 firstCellType propertyName
 description The name of your language. Also serves as the default file extension.
nodeType nodeType
 todo Add a way to have the nodeTypeId != first word.
 todo Add multiple dispatch?
 cells nodeTypeId
 description Node types are a core unit of your language. Examples of nodeType would be "header", "person", "if", "+", "define", etc.
 catchAllNodeType catchAll.error
 baseNodeType nonTerminalNode
 firstCellType nodeTypeIdConstant
 inScope abstract.nodeTypeRule abstract.constant todo extends
nodeType extends
 description NodeTypes/abstractNodeType, and cellTypes definitions can extend others.
 todo Add mixin support in addition to/in place of extends?
 cells extendedId
 extends abstract.nodeTypeRule
nodeType nodeTypeOrder
 todo Should we just reuse inScope order? And have a property that indicates order is not important?
 todo Add more docs/testing around this. How would it handle things with mixed-order sensitivity such as todo comments?
 todo This isnt properly cell checked. It should reference inScope.
 catchAllCellType nodeTypeId
 firstCellType propertyName
 description Optionally specify what order nodeTypes should be sorted in when prettifying a file.
nodeType regex
 catchAllCellType regexWord
 description The word must match this pattern or it shall be marked as an error.
 firstCellType cellPropertyName
 single
nodeType tooling
 description Tooling directives are not part of the language grammar but used for tools like editors, preprocessors and compilers. Something like "tooling onsave {bash command}". Should be at top of file, if present at all.
 catchAllCellType toolingDirectiveWord
 firstCellType toolingDirectiveWord
 catchAllNodeType tooling
nodeType todo
 description Todos let you add notes about what is coming in the future in the source code. They are like comments in other languages except should only be used for todos.
 catchAllCellType todoWord
 firstCellType todoWord
 catchAllNodeType todo
nodeType version
 cells semanticVersion
 firstCellType propertyName
 description Version number of your language.
nodeType closeChildren
 extends abstract.compilerRule
nodeType indentCharacter
 extends abstract.compilerRule
nodeType listDelimiter
 extends abstract.compilerRule
nodeType openChildren
 extends abstract.compilerRule
nodeType sub
 extends abstract.compilerRule
nodeType boolean
 cells constantIdentifier
 catchAllCellType booleanCell
 extends abstract.constant
nodeType float
 cells constantIdentifier
 catchAllCellType floatCell
 extends abstract.constant
nodeType int
 cells constantIdentifier
 catchAllCellType intCell
 extends abstract.constant
nodeType catchAll.multilineStringConstant
 description String constants can span multiple lines.
 catchAllCellType stringCell
 firstCellType stringCell
 catchAllNodeType catchAll.multilineStringConstant
nodeType string
 cells constantIdentifier
 catchAllCellType stringCell
 catchAllNodeType catchAll.multilineStringConstant
 extends abstract.constant
nodeType browser
 cells constructorName
 catchAllCellType scriptUrl
 description constructorName will be searched for on the window object.
 extends abstract.environment
nodeType nodejs
 cells constructorFilePath
 catchAllCellType constructorName
 description For nodejs constructors, if specified, the existence of this constructor will be checked when the grammar file is checked for errors.
 extends abstract.environment
nodeType baseNodeType
 cells baseNodeTypes
 description In rare cases with untyped content you can use a blobNode, for now, to skip parsing for performance gains. The base errorNode will report errors when parsed. Use that if you don't want to implement your own error nodeType.
 extends abstract.nodeTypeRule
nodeType catchAllCellType
 cells cellTypeEnum
 description If there are extra words in the node's line, parse these words as this type.
 extends abstract.nodeTypeRule
nodeType catchAllNodeType
 description If a nodeType is not found in the inScope list, instantiate this type of node instead.
 cells nodeTypeEnum
 extends abstract.nodeTypeRule
nodeType cells
 catchAllCellType cellTypeEnum
 description Describes the word type of each word in the line.
 extends abstract.nodeTypeRule
nodeType compiler
 todo Remove this and its children?
 cells compilerTargetExtension
 inScope sub listDelimiter openChildren closeChildren indentCharacter
 extends abstract.nodeTypeRule
nodeType description
 catchAllCellType stringCell
 todo Should we make this multiline?
 extends abstract.nodeTypeRule
nodeType example
 todo Should this just be a "string" constant on nodes?
 description Provide a one line description and then a snippet of example code.
 catchAllCellType exampleWord
 catchAllNodeType catchAll.exampleLine
 extends abstract.nodeTypeRule
nodeType firstCellType
 cells cellTypeEnum
 description If you have an any node, use this to correctly parse the first word.
 extends abstract.nodeTypeRule
nodeType frequency
 todo Remove this nodeType. Switch to conditional frequencies.
 cells floatCell
 extends abstract.nodeTypeRule
nodeType inScope
 description A list of possible child nodeTypes for a node.
 catchAllCellType nodeTypeEnum
 extends abstract.nodeTypeRule
nodeType javascript
 description Provide raw javascript code that will be inserted into a node type's class.
 catchAllNodeType catchAll.javascriptCodeLine
 extends abstract.nodeTypeRule
nodeType required
 description If present, the parent node will have an error if one of these nodes is not provided.
 extends abstract.nodeTypeRule
nodeType single
 description If present and their are more than 1 of these nodes on the parent, an error will be present.
 extends abstract.nodeTypeRule
nodeType tags
 catchAllCellType tag
 extends abstract.nodeTypeRule
nodeType constructors
 todo Remove/refactor this
 inScope abstract.environment
 description A map of language/environment to filepaths and constructor classes to instantiate nodes with.
 extends abstract.nonTerminalNodeTypeRule
nodeType abstract
 todo Rename to abstractNodeType?
 firstCellType abstractConstant
 description An abstract nodeType cannot be used by itself but provides common functionality to nodeTypes that extend it.
 inScope group
 extends nodeType