grammar
 name grammar
 description This file is just used for type checking and documenting grammar files. The actual tree grammar parser is hard coded.
 catchAllNodeType catchAll.error
 nodeTypeOrder # grammar cellType abstract nodeType
 extensions grammar gram
 example A grammar that parses anything:
  grammar
   name latin
   catchAllNodeType anyNode
  nodeType anyNode
   blob
 version 1.2.0
 inScope grammar cellType abstract nodeType tooling
cellType abstractConstant
 highlightScope entity.name.tag
cellType anyFirstWord
cellType anyWord
cellType builtInConstructorOrConstructorName
cellType builtInConstructorOrFilePath
cellType cellPropertyName
 highlightScope variable.parameter
cellType cellTypeEnum
 enumFromGrammar cellType
cellType cellTypeId
cellType cellTypeIdConstant
 highlightScope variable.parameter
cellType grammarTypes
 enum cellType nodeType abstract
cellType compilerTargetExtension
 description The target extension of the compiler output such as "o" or "js" or "html"
cellType constructorName
cellType enumOption
cellType extendedNodeType
cellType extraWord
 highlightScope invalid
cellType fileExtension
cellType toolingDirectiveWord
 highlightScope comment
cellType filepath
cellType float
 regex \-?[0-9]*\.?[0-9]*
cellType grammarName
 highlightScope constant
cellType int
 regex \-?[0-9]+
 highlightScope constant.numeric
cellType javascriptCodeWord
cellType lowercaseWord
 regex [a-z]+
cellType nodeTypeEnum
 highlightScope variable.parameter
 enumFromGrammar nodeType abstract
cellType nodeTypeId
 highlightScope variable.parameter
cellType nodeTypeIdConstant
 highlightScope variable.function
cellType propertyName
 highlightScope constant.language
cellType regexWord
 highlightScope string.regexp
cellType scopeName
 enum comment comment.block comment.block.documentation comment.line constant constant.character.escape constant.language constant.numeric constant.numeric.complex constant.numeric.complex.imaginary constant.numeric.complex.real constant.numeric.float constant.numeric.float.binary constant.numeric.float.decimal constant.numeric.float.hexadecimal constant.numeric.float.octal constant.numeric.float.other constant.numeric.integer constant.numeric.integer.binary constant.numeric.integer.decimal constant.numeric.integer.hexadecimal constant.numeric.integer.octal constant.numeric.integer.other constant.other constant.other.placeholder entity entity.name entity.name.class entity.name.class.forward-decl entity.name.constant entity.name.enum entity.name.function entity.name.function.constructor entity.name.function.destructor entity.name.impl entity.name.interface entity.name.label entity.name.namespace entity.name.section entity.name.struct entity.name.tag entity.name.trait entity.name.type entity.name.union entity.other.attribute-name entity.other.inherited-class invalid invalid.deprecated invalid.illegal keyword keyword.control keyword.control.conditional keyword.control.import keyword.declaration keyword.operator keyword.operator.arithmetic keyword.operator.assignment keyword.operator.bitwise keyword.operator.logical keyword.operator.word keyword.other markup markup.bold markup.deleted markup.heading markup.inserted markup.italic markup.list.numbered markup.list.unnumbered markup.other markup.quote markup.raw.block markup.raw.inline markup.underline markup.underline.link meta meta.annotation meta.annotation.identifier meta.annotation.parameters meta.block meta.braces meta.brackets meta.class meta.enum meta.function meta.function-call meta.function.parameters meta.function.return-type meta.generic meta.group meta.impl meta.interface meta.interpolation meta.namespace meta.paragraph meta.parens meta.path meta.preprocessor meta.string meta.struct meta.tag meta.toc-list meta.trait meta.type meta.union punctuation punctuation.accessor punctuation.definition.annotation punctuation.definition.comment punctuation.definition.generic.begin punctuation.definition.generic.end punctuation.definition.keyword punctuation.definition.string.begin punctuation.definition.string.end punctuation.definition.variable punctuation.section.block.begin punctuation.section.block.end punctuation.section.braces.begin punctuation.section.braces.end punctuation.section.brackets.begin punctuation.section.brackets.end punctuation.section.group.begin punctuation.section.group.end punctuation.section.interpolation.begin punctuation.section.interpolation.end punctuation.section.parens.begin punctuation.section.parens.end punctuation.separator punctuation.separator.continuation punctuation.terminator source source.language-suffix.embedded storage storage.modifier storage.type storage.type keyword.declaration.type storage.type.class keyword.declaration.class storage.type.enum keyword.declaration.enum storage.type.function keyword.declaration.function storage.type.impl keyword.declaration.impl storage.type.interface keyword.declaration.interface storage.type.struct keyword.declaration.struct storage.type.trait keyword.declaration.trait storage.type.union keyword.declaration.union string string.quoted.double string.quoted.other string.quoted.single string.quoted.triple string.regexp string.unquoted support support.class support.constant support.function support.module support.type text text.html text.xml variable variable.annotation variable.function variable.language variable.other variable.other.constant variable.other.member variable.other.readwrite variable.parameter
 highlightScope string
cellType scriptUrl
cellType semanticVersion
 regex [0-9]+\.[0-9]+\.[0-9]+
 highlightScope constant.numeric
cellType string
 highlightScope string
cellType tag
cellType word
 regex [a-zA-Z]+
 highlightScope variable.parameter
cellType extendedCellType cellTypeId
cellType exampleWord string
 highlightScope comment
abstract abstract.compilerRule
 catchAllCellType anyWord
 firstCellType propertyName
abstract abstract.environment
abstract abstract.nodeTypeRule
 firstCellType propertyName
 single
abstract abstract.nonTerminalNodeTypeRule abstract.nodeTypeRule
nodeType tooling
 description Tooling directives are not part of the language grammar but used for tools like editors, preprocessors and compilers. Something like "tooling onsave {bash command}". Should be at top of file, if present at all.
 catchAllCellType toolingDirectiveWord
 firstCellType toolingDirectiveWord
 catchAllNodeType tooling
nodeType catchAll.constantAny
 catchAllCellType anyWord
 catchAllNodeType catchAll.constantAny
nodeType catchAll.constantDefinition
 catchAllCellType anyWord
 catchAllNodeType catchAll.constantAny
nodeType catchAll.defaultTuple
 cells anyWord
 catchAllCellType anyWord
nodeType catchAll.error
 constructors
  nodejs ErrorNode
  browser ErrorNode
nodeType catchAll.exampleLine
 catchAllCellType exampleWord
 firstCellType exampleWord
 catchAllNodeType catchAll.exampleLine
nodeType cellType
 cells cellTypeId
 catchAllCellType extendedCellType
 firstCellType cellTypeIdConstant
 inScope highlightScope regex enumFromGrammar description enum
nodeType enum
 catchAllCellType enumOption
 firstCellType cellPropertyName
nodeType enumFromGrammar
 catchAllCellType grammarTypes
 firstCellType cellPropertyName
nodeType extensions
 catchAllCellType fileExtension
 firstCellType propertyName
 description File extensions of your language.
nodeType grammar
 required
 single
 firstCellType propertyName
 inScope name description example extensions nodeTypeOrder inScope constructors compiler catchAllNodeType version
nodeType group
 catchAllCellType nodeTypeId
 firstCellType propertyName
 description Available on abstract nodes only. Use it to more concisely generate nodeTypes all extending from this abstract nodeType, if they have no special properties.
nodeType highlightScope
 firstCellType propertyName
 cells scopeName
 description Provide this to get syntax highlighting in editors like Sublime and CodeMirror.
 single
nodeType javascriptCodeLine
 catchAllCellType javascriptCodeWord
 catchAllNodeType javascriptCodeLine
nodeType name
 cells grammarName
 firstCellType propertyName
 description The name of your language. Also serves as the default file extension.
nodeType nodeType
 cells nodeTypeId
 description Node types are a core unit of your language. Examples of nodeType would be "header", "person", "if", "+", "define", etc.
 catchAllCellType extendedNodeType
 catchAllNodeType catchAll.error
 constructors
  nodejs NonTerminalNode
  browser NonTerminalNode
 firstCellType nodeTypeIdConstant
 inScope abstract.nodeTypeRule
nodeType nodeTypeOrder
 catchAllCellType nodeTypeId
 firstCellType propertyName
 description Optionally specify what order nodeTypes should be sorted in when prettifying a file.
nodeType regex
 catchAllCellType regexWord
 description The word must match this pattern or it shall be marked as an error.
 firstCellType cellPropertyName
 single
nodeType version
 cells semanticVersion
 firstCellType propertyName
 description Version number of your language.
nodeType closeChildren abstract.compilerRule
nodeType indentCharacter abstract.compilerRule
nodeType listDelimiter abstract.compilerRule
nodeType openChildren abstract.compilerRule
nodeType sub abstract.compilerRule
nodeType browser abstract.environment
 cells builtInConstructorOrConstructorName
 catchAllCellType scriptUrl
 description builtInConstructorOrConstructorName will be searched for on the window object.
nodeType javascript abstract.environment
 catchAllCellType javascriptCodeWord
 catchAllNodeType javascriptCodeLine
 description Put in some code to eval.
nodeType nodejs abstract.environment
 cells builtInConstructorOrFilePath
 catchAllCellType constructorName
 description For nodejs constructors, if specified, the existence of this constructor will be checked when the grammar file is checked for errors.
nodeType blob abstract.nodeTypeRule
 description In rare cases with untyped content you can use a blob node, for now, to skip parsing for performance gains.
nodeType catchAllCellType abstract.nodeTypeRule
 cells cellTypeEnum
 description If there are extra words in the node's line, parse these words as this type.
nodeType catchAllNodeType abstract.nodeTypeRule
 description If a nodeType is not found in the inScope list, instantiate this type of node instead.
 cells nodeTypeEnum
nodeType cells abstract.nodeTypeRule
 catchAllCellType cellTypeEnum
 description Describes the word type of each word in the line.
nodeType compiler abstract.nodeTypeRule
 cells compilerTargetExtension
 inScope sub listDelimiter openChildren closeChildren indentCharacter
nodeType constants abstract.nodeTypeRule
 catchAllNodeType catchAll.constantDefinition
nodeType defaults abstract.nodeTypeRule
 catchAllNodeType catchAll.defaultTuple
nodeType description abstract.nodeTypeRule
 catchAllCellType string
nodeType example abstract.nodeTypeRule
 description Provide a one line description and then a snippet of example code.
 catchAllCellType exampleWord
 catchAllNodeType catchAll.exampleLine
nodeType firstCellType abstract.nodeTypeRule
 cells cellTypeEnum
 description If you have an any node, use this to correctly parse the first word.
nodeType frequency abstract.nodeTypeRule
 cells float
nodeType required abstract.nodeTypeRule
 description If present, the parent node will have an error if one of these nodes is not provided.
nodeType single abstract.nodeTypeRule
 description If present and their are more than 1 of these nodes on the parent, an error will be present.
nodeType tags abstract.nodeTypeRule
 catchAllCellType tag
nodeType constructors abstract.nonTerminalNodeTypeRule
 inScope abstract.environment
 description A map of language/environment to filepaths and constructor classes to instantiate nodes with.
nodeType inScope abstract.nodeTypeRule
 description A list of possible child nodeTypes for a node.
 catchAllCellType nodeTypeEnum
nodeType abstract nodeType
 firstCellType abstractConstant
 description An abstract nodeType cannot be used by itself but provides common functionality to nodeTypes that extend it.
 inScope group