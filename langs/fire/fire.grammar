grammar
 name fire
 description A useless Tree Language for testing Tree Notation features.
 compiler js
 inScope #! term nt
 catchAllNodeType error
 javascript
  async execute() { return this.executeSync() }
  compile() { return super.compile("js")}
  executeSync() {
    let outputLines = []
    const _originalConsoleLog = console.log
    const tempConsoleLog = (...params) => outputLines.push(params)
    console.log = tempConsoleLog
    const compiled = this.compile("js")
    eval(compiled)
    console.log = _originalConsoleLog
    console.log(outputLines.join("\n"))
    return outputLines
  }
cellType anyFirstWord
cellType number
 regex \-?[0-9]*\.?[0-9]*
cellType identifier
 regex [$A-Za-z_][0-9a-zA-Z_$]*
cellType identifiers
 extends identifier
cellType any
cellType boolean
 regex (false|true)
cellType filepath
nodeType #!
 catchAllCellType any
 compiler js
  sub // #! {any}
nodeType error
 baseNodeType errorNode
 compiler js
  sub // error
nodeType nt
 inScope term nt
nodeType term
nodeType assignment
 extends term
nodeType dump
 description Dump variable(s) to console
 catchAllCellType identifier
 compiler js
  sub console.log({identifier})
  listDelimiter , 
 frequency .5
 extends term
nodeType print
 description Print string to console
 catchAllCellType any
 compiler js
  sub console.log("{any}")
 extends term
nodeType require
 description Require Something
 cells identifier filepath
 compiler js
  sub const {identifier} = require("{filepath}")
 frequency .1
 extends term
nodeType export
 description Export This
 cells identifier
 compiler js
  sub module.exports = {identifier}
 frequency .1
 extends term
nodeType set#
 description Number Assignment
 cells identifier number
 compiler js
  sub const {identifier} = {number}
 frequency .3
 extends assignment
nodeType set?
 description Boolean Assignment
 cells identifier boolean
 compiler js
  sub const {identifier} = {boolean}
 frequency .04
 extends assignment
nodeType set$
 description String Assignment
 cells identifier
 catchAllCellType any
 compiler js
  sub const {identifier} = "{any}"
 frequency .2
 extends assignment
nodeType join
 description Join strings to form new string
 cells identifier
 catchAllCellType identifiers
 compiler js
  sub const {identifier} = [{identifiers}].join("")
  listDelimiter , 
 frequency .2
 extends assignment
nodeType add
 description Add items and store result
 cells identifier
 catchAllCellType any
 compiler js
  sub const {identifier} = [{any}].reduce((sum, num) => sum + num)
  listDelimiter , 
 frequency .1
 extends assignment
nodeType set?<
 description Less than test
 cells identifier any any
 compiler js
  sub const {identifier} = {any} < {any}
 frequency .1
 extends set?
nodeType set?<=
 description Less than or equal to test
 cells identifier any any
 compiler js
  sub const {identifier} = {any} <= {any}
 frequency .1
 extends set?
nodeType set?>
 description Greater than test
 cells identifier number number
 compiler js
  sub const {identifier} = {number} > {number}
 frequency .1
 extends set?
nodeType set?>=
 description Greater than or equal to test
 cells identifier number number
 compiler js
  sub const {identifier} = {number} >= {number}
 frequency .1
 extends set?
nodeType set##
 cells identifier
 catchAllCellType any
 compiler js
  sub const {identifier} = {any}
 frequency .2
 extends assignment
nodeType set#-
 description Subtract Numbers
 compiler js
  listDelimiter  - 
 extends set##
nodeType set#/
 description Divide Numbers
 compiler js
  listDelimiter  / 
 extends set##
nodeType set#%
 description Modulo Numbers
 compiler js
  listDelimiter %
 extends set##
nodeType set#*
 description Multiply Numbers
 compiler js
  listDelimiter  * 
 extends set##
nodeType set#~
 description Mutable Number Assignment
 cells identifier number
 compiler js
  sub let {identifier} = {number}
 extends assignment
nodeType --
 description Decrement
 cells identifier
 compiler js
  sub {identifier}--
 frequency .1
 extends term
nodeType ++
 description Increment
 frequency .3
 cells identifier
 compiler js
  sub {identifier}++
 extends term
nodeType set#[]
 description Number Array Assignment
 cells identifier
 catchAllCellType number
 frequency .4
 compiler js
  sub const {identifier} = [{number}]
  listDelimiter , 
 extends assignment
nodeType set*>>
 description Function Call
 frequency .5
 cells identifier identifier
 catchAllCellType any
 compiler js
  sub const {identifier} = {identifier}({any})
  listDelimiter , 
 extends assignment
nodeType >>
 description Function call ignore result.
 frequency .1
 cells identifier
 catchAllCellType any
 compiler js
  sub {identifier}({any})
  listDelimiter , 
 extends term
nodeType set.>>
 description Method Call
 frequency .5
 cells identifier identifier identifier
 catchAllCellType any
 compiler js
  sub const {identifier} = {identifier}.{identifier}({any})
  listDelimiter , 
 extends assignment
nodeType return
 cells any
 compiler js
  sub return {any}
 frequency .1
 extends term
nodeType jsblock
 compiler js
  openChildren  {
  closeChildren }
 extends nt
nodeType setfn
 description Function Assignment
 cells identifier
 catchAllCellType any
 compiler js
  sub const {identifier} = ({any}) =>
  listDelimiter , 
 frequency .1
 extends jsblock
nodeType block
 description block of code
 frequency .2
 compiler js
  sub /* {identifier} */
 extends jsblock
nodeType if
 description If tile
 cells identifier
 frequency .2
 compiler js
  sub if ({identifier})
 extends jsblock
nodeType while
 description While tile
 cells identifier
 frequency .1
 compiler js
  sub while ({identifier})
 extends jsblock